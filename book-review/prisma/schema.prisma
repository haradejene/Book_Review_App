generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReadingStatus {
  want_to_read
  reading
  read
}

enum ReportStatus {
  pending
  reviewed
  dismissed
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  email           String          @unique
  passwordHash    String
  avatarUrl       String?
  bio             String?
  reviews         Review[]
  reviewLikes     ReviewLike[]
  reviewComments  ReviewComment[]
  readingLists    ReadingList[]
  shelves         Shelf[]
  reports         Report[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Book {
  id             Int            @id @default(autoincrement())
  title          String
  author         String
  description    String?
  aboutAuthor    String?
  coverUrl       String?
  genre          String?
  publishedYear  Int?
  reviews        Review[]
  readingLists   ReadingList[]
  shelfBooks     ShelfBook[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Review {
  id         Int             @id @default(autoincrement())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  book       Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     Int
  rating     Int
  reviewText String
  likesCount Int             @default(0)
  likes      ReviewLike[]
  comments   ReviewComment[]
  reports    Report[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([userId, bookId])
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  createdAt DateTime @default(now())

  @@unique([userId, reviewId])
}

model ReviewComment {
  id          Int      @id @default(autoincrement())
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId    Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  commentText String
  createdAt   DateTime @default(now())
}

model ReadingList {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  book      Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  status    ReadingStatus @default(want_to_read)
  progress  Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, bookId])
}

model Shelf {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  name        String
  description String?
  shelfBooks  ShelfBook[]
  createdAt   DateTime    @default(now())
}

model ShelfBook {
  id       Int      @id @default(autoincrement())
  shelf    Shelf    @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  shelfId  Int
  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   Int
  addedAt  DateTime @default(now())

  @@unique([shelfId, bookId])
}

model Report {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  review    Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  reason    String
  status    ReportStatus @default(pending)
  createdAt DateTime     @default(now())
}
